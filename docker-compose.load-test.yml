version: '3.8'

services:
  # Backend API
  mrs-backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    container_name: mrs-api-loadtest
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/mrs.db;Mode=ReadWriteCreate
      - Jwt__Key=ThisIsMySecretKeyForJwtAuthenticationWhichShouldBeAtLeast256Bits
      - Jwt__Issuer=MRS.Api
      - Jwt__Audience=MRS.Client
      - Jwt__ExpirationMinutes=30
    ports:
      - "5080:8080"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mrs-network

  # Frontend (Optional for load testing)
  mrs-frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    container_name: mrs-frontend-loadtest
    ports:
      - "3000:80"
    depends_on:
      - mrs-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mrs-network

  # Load testing with K6
  k6-load-test:
    image: grafana/k6:latest
    container_name: mrs-k6-loadtest
    depends_on:
      mrs-backend:
        condition: service_healthy
    environment:
      - BASE_URL=http://mrs-backend:8080
    volumes:
      - ./load-tests:/scripts
      - ./load-test-results:/results
    command: run --out json=/results/load-test-results.json /scripts/load-test.js
    networks:
      - mrs-network

  # Database setup for testing
  db-seed:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    container_name: mrs-db-seed
    depends_on:
      mrs-backend:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/mrs.db;Mode=ReadWriteCreate
    volumes:
      - ./data:/app/data
      - ./scripts:/scripts
    command: >
      sh -c "
        echo 'Seeding test data...'
        dotnet MRS.Api.dll --seed-data || true
        echo 'Database seeding completed'
      "
    networks:
      - mrs-network

  # Monitoring during load test
  prometheus:
    image: prom/prometheus:latest
    container_name: mrs-prometheus-loadtest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - mrs-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mrs-grafana-loadtest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mrs-network

  # Resource monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: mrs-cadvisor-loadtest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - mrs-network

networks:
  mrs-network:
    driver: bridge

volumes:
  grafana-storage:
    driver: local