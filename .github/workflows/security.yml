name: Security Scanning

on:
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # .NET dependency scanning
    - name: Scan .NET dependencies
      run: |
        cd app/backend
        dotnet list package --vulnerable --include-transitive
        
        # Install and run dotnet-outdated tool
        dotnet tool install --global dotnet-outdated-tool
        dotnet outdated --fail-on-updates

    # Node.js dependency scanning
    - name: Run npm audit
      run: |
        cd app/frontend
        npm audit --audit-level=high
        
    # Snyk vulnerability scanning
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=app/backend/MRS.Api/MRS.Api.csproj
      continue-on-error: true

    - name: Run Snyk on Node.js
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test
        working-directory: app/frontend
      continue-on-error: true

  # Container scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Backend Docker image
      run: |
        cd app/backend
        cat << 'EOF' > Dockerfile
        FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
        WORKDIR /app
        EXPOSE 80
        EXPOSE 443

        FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
        WORKDIR /src
        COPY ["MRS.Api/MRS.Api.csproj", "MRS.Api/"]
        COPY ["MRS.Application/MRS.Application.csproj", "MRS.Application/"]
        COPY ["MRS.Domain/MRS.Domain.csproj", "MRS.Domain/"]
        COPY ["MRS.Infrastructure/MRS.Infrastructure.csproj", "MRS.Infrastructure/"]
        RUN dotnet restore "MRS.Api/MRS.Api.csproj"
        COPY . .
        WORKDIR "/src/MRS.Api"
        RUN dotnet build "MRS.Api.csproj" -c Release -o /app/build

        FROM build AS publish
        RUN dotnet publish "MRS.Api.csproj" -c Release -o /app/publish

        FROM base AS final
        WORKDIR /app
        COPY --from=publish /app/publish .
        ENTRYPOINT ["dotnet", "MRS.Api.dll"]
        EOF
        docker build -t mrs-backend:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mrs-backend:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        vuln-type: 'os,library'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        grype mrs-backend:security-scan -o json > grype-results.json
        
        # Check for critical vulnerabilities
        critical_count=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' grype-results.json)
        if [ "$critical_count" -gt 0 ]; then
          echo "Found $critical_count critical vulnerabilities"
          jq '.matches[] | select(.vulnerability.severity == "Critical")' grype-results.json
          exit 1
        fi

  # Secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        extra_args: --debug --only-verified

    - name: Detect secrets with Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # SAST - Static Application Security Testing
  sast-scan:
    name: SAST Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'csharp', 'javascript'
        queries: +security-and-quality,security-extended

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build for analysis
      run: |
        cd app/backend
        dotnet build --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/csharp
          p/javascript
          p/typescript
          p/react
          p/owasp-top-ten
      continue-on-error: true

  # Infrastructure as Code scanning
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: true
        framework: all
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Terraform security scan with tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true
      continue-on-error: true

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Check .NET licenses
      run: |
        dotnet tool install --global dotnet-project-licenses
        cd app/backend
        dotnet-project-licenses -i MRS.Api

    - name: Check npm licenses
      run: |
        cd app/frontend
        npx license-checker --summary --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;CC0-1.0'

  # Security report generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, secret-scan, sast-scan, iac-scan, license-check]
    if: always()
    
    steps:
    - name: Generate summary report
      run: |
        echo "## 🔒 Security Scan Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job results
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SAST Analysis | ${{ needs.sast-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| IaC Scan | ${{ needs.iac-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add recommendations
        echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.dependency-scan.result }}" == "failure" ]]; then
          echo "- ⚠️ Update vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
          echo "- 🔑 Remove or rotate exposed secrets" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.container-scan.result }}" == "failure" ]]; then
          echo "- 🐳 Fix container vulnerabilities" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Generated: $(date)" >> $GITHUB_STEP_SUMMARY