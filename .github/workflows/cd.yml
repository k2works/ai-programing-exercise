name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  AZURE_WEBAPP_NAME: 'mrs-app'
  AZURE_WEBAPP_PACKAGE_PATH: './app/backend/publish'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # Build and prepare artifacts
  build-artifacts:
    name: Build Deployment Artifacts
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version number
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="1.0.${{ github.run_number }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build Backend
      run: |
        cd app/backend
        dotnet publish MRS.Api/MRS.Api.csproj \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --output ./publish \
          -p:Version=${{ steps.version.outputs.version }}

    - name: Build Frontend
      run: |
        cd app/frontend
        npm ci
        npm run build
        echo "${{ steps.version.outputs.version }}" > build/version.txt

    - name: Upload Backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-${{ steps.version.outputs.version }}
        path: app/backend/publish/

    - name: Upload Frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-${{ steps.version.outputs.version }}
        path: app/frontend/build/

  # Deploy to Development
  deploy-development:
    name: Deploy to Development
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    needs: build-artifacts
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://dev-mrs.example.com
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-${{ needs.build-artifacts.outputs.version }}
        path: ./deploy

    - name: Deploy to Development Server
      run: |
        echo "Deploying version ${{ needs.build-artifacts.outputs.version }} to Development"
        # Add actual deployment commands here
        # Example: rsync, scp, or cloud CLI commands

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on Development environment"
        # Add smoke test commands

    - name: Notify deployment
      run: |
        echo "### 🚀 Deployed to Development" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ needs.build-artifacts.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Development" >> $GITHUB_STEP_SUMMARY
        echo "- URL: https://dev-mrs.example.com" >> $GITHUB_STEP_SUMMARY

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    if: |
      github.ref == 'refs/heads/main' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    needs: build-artifacts
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging-mrs.example.com
    
    steps:
    - name: Download Backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-${{ needs.build-artifacts.outputs.version }}
        path: ./backend-deploy

    - name: Download Frontend artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-${{ needs.build-artifacts.outputs.version }}
        path: ./frontend-deploy

    # Azure deployment example
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Backend to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}-staging-api
        package: ./backend-deploy
        slot-name: 'staging'

    - name: Deploy Frontend to Azure Storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az storage blob upload-batch \
            --account-name mrsstagingstorage \
            --destination '$web' \
            --source ./frontend-deploy \
            --overwrite

    - name: Run database migrations
      run: |
        echo "Running database migrations for staging"
        # Add migration commands

    - name: Health check
      run: |
        echo "Performing health checks"
        curl -f https://staging-mrs.example.com/health || exit 1

    - name: Run E2E tests
      run: |
        echo "Running E2E tests on Staging"
        # Add E2E test commands

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    if: |
      startsWith(github.ref, 'refs/tags/v') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [build-artifacts, deploy-staging]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://mrs.example.com
    
    steps:
    - name: Download Backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-${{ needs.build-artifacts.outputs.version }}
        path: ./backend-deploy

    - name: Download Frontend artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-${{ needs.build-artifacts.outputs.version }}
        path: ./frontend-deploy

    - name: Create backup before deployment
      run: |
        echo "Creating backup of current production"
        # Add backup commands

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Blue-Green deployment
    - name: Deploy Backend to Blue slot
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}-api
        package: ./backend-deploy
        slot-name: 'blue'

    - name: Health check on Blue slot
      run: |
        echo "Testing Blue slot"
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}-api-blue.azurewebsites.net/health || exit 1

    - name: Swap Blue to Production
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az webapp deployment slot swap \
            --resource-group mrs-prod-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }}-api \
            --slot blue \
            --target-slot production

    - name: Deploy Frontend to CDN
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Upload to storage
          az storage blob upload-batch \
            --account-name mrsprodstorage \
            --destination '$web' \
            --source ./frontend-deploy \
            --overwrite
          
          # Purge CDN
          az cdn endpoint purge \
            --resource-group mrs-prod-rg \
            --profile-name mrs-cdn \
            --name mrs-endpoint \
            --content-paths '/*'

    - name: Production validation
      run: |
        echo "Running production validation tests"
        # Add validation test commands

    - name: Monitor deployment
      run: |
        echo "Monitoring deployment metrics"
        # Add monitoring commands

    - name: Create release notes
      run: |
        echo "### 🎉 Production Release" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ needs.build-artifacts.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
        echo "- URL: https://mrs.example.com" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment Time: $(date)" >> $GITHUB_STEP_SUMMARY

  # Rollback job
  rollback:
    name: Rollback Production
    if: failure() && needs.deploy-production.result == 'failure'
    needs: deploy-production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Rollback deployment
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Rolling back production deployment"
          # Swap slots back
          az webapp deployment slot swap \
            --resource-group mrs-prod-rg \
            --name ${{ env.AZURE_WEBAPP_NAME }}-api \
            --slot production \
            --target-slot blue

    - name: Notify rollback
      run: |
        echo "### ⚠️ Production Rollback Executed" >> $GITHUB_STEP_SUMMARY
        echo "Deployment failed and was rolled back" >> $GITHUB_STEP_SUMMARY