/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Apply the checkstyle plugin for static code analysis
    id 'checkstyle'
    // Apply the jacoco plugin for code coverage
    id 'jacoco'
    // Apply the SpotBugs plugin for additional static analysis
    id 'com.github.spotbugs' version '6.0.7'
    // Apply the Spotless plugin for code formatting
    id 'com.diffplug.spotless' version '6.23.3'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy jacocoTestReport // テスト後にカバレッジレポートを生成
}

// Checkstyle設定（静的コード解析）
checkstyle {
    toolVersion = '10.12.0'
    configFile = file('config/checkstyle/checkstyle.xml')
}

// SpotBugs設定（静的コード解析）
spotbugs {
    ignoreFailures = true
}

// Spotless設定（コードフォーマッタ）
spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

// JaCoCo設定（コードカバレッジ）
jacocoTestReport {
    dependsOn test // テストが実行されることを保証
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}

// カスタムタスク
tasks.register('format') {
    description = 'コードフォーマットを実行します'
    group = 'custom'
    dependsOn 'spotlessApply'
}

tasks.register('lint') {
    description = '静的コード解析を実行します'
    group = 'custom'
    dependsOn 'checkstyleMain', 'checkstyleTest', 'spotbugsMain'
}

tasks.register('coverage') {
    description = 'コードカバレッジレポートを生成します'
    group = 'custom'
    dependsOn 'jacocoTestReport'
}

tasks.register('checkAll') {
    description = 'すべての品質チェックを実行します'
    group = 'custom'
    dependsOn 'test', 'lint', 'coverage', 'format'
}

// タスクランナー（Guardに相当）
tasks.register('watch') {
    description = 'ファイル変更を監視してテストを自動実行します'
    group = 'custom'
    doLast {
        println 'ファイル変更監視を開始します...'
        println 'Gradleの継続ビルド機能を使用してください: ./gradlew test --continuous'
    }
}

// デフォルトタスクを設定（すべての品質チェックを実行）
defaultTasks 'checkAll'
