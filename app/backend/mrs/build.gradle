plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '6.0.21'
}

group = 'mrs'
version = '0.0.1-SNAPSHOT'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// 非推奨API警告を抑制
tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:-deprecation"]
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // OpenAPI/Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // MyBatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

    // JWT（JJWT 自前発行/検証）
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    runtimeOnly 'org.postgresql:postgresql:42.7.3'
    runtimeOnly 'com.h2database:h2:2.2.224'
    implementation 'org.flywaydb:flyway-core:10.16.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.cucumber:cucumber-java:7.18.1'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.18.1'
    testImplementation 'io.cucumber:cucumber-spring:7.18.1'
    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.6'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = '10.17.0'
    configDirectory = file("config/checkstyle")
}

pmd {
    toolVersion = '7.0.0'  // Java 21対応の最新バージョン
    consoleOutput = true
    rulesMinimumPriority = 5
    ruleSets = []
    ruleSetFiles = files('config/pmd/pmd.xml')
}

// PMDでSwaggerConfig関連を除外（OpenAPI依存関係でStackOverflowが発生するため）
pmdMain {
    exclude '**/config/SwaggerConfig.java'
    exclude '**/infrastructure/in/web/**'  // OpenAPIアノテーションがあるControllerも除外
}

pmdTest {
    exclude '**/config/SwaggerConfig.java'
}

spotbugs {
    toolVersion = '4.8.6'
}

// PMDを再有効化（Java 21 + PMD 7.0.0で互換性テスト）

// SpotBugsでコード品質チェックを強化
spotbugsMain {
    reports {
        xml.required = false
        html.required = true
    }
}

tasks.register('qualityCheck') {
    group = 'verification'
    dependsOn 'checkstyleMain', 'checkstyleTest', 'pmdMain', 'pmdTest', 'spotbugsMain', 'spotbugsTest', 'test', 'jacocoTestReport'
}

// サイクロマティック複雑度レポート生成タスク（PMDの代替）
tasks.register('cyclomaticComplexity') {
    group = 'verification'
    description = 'Generate cyclomatic complexity report using simple analysis'
    doLast {
        println "=== Cyclomatic Complexity Analysis ==="
        println "注意: PMD（Java 17互換性問題）の代替として手動チェックを推奨"
        println ""
        println "推奨基準:"
        println "- メソッドレベル: 複雑度 ≤ 7"
        println "- クラスレベル: 複雑度 ≤ 12"
        println ""
        println "推奨ツール:"
        println "1. IntelliJ IDEA: Analyze > Calculate Metrics"
        println "2. Eclipse: Metrics Plugin"
        println "3. SonarQube Community Edition"
        println ""
        println "対象ファイル（SwaggerConfig除外済み）:"
        fileTree(dir: 'src/main/java', include: '**/*.java').each { file ->
            if (!file.path.contains('SwaggerConfig')) {
                def relativePath = file.path.replace(projectDir.path + File.separator + 'src' + File.separator + 'main' + File.separator + 'java' + File.separator, '')
                println "  - ${relativePath}"
            }
        }
        println ""
        println "✅ SpotBugsとCheckstyleによる品質チェックは有効です"
    }
}
